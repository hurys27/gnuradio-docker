options:
  parameters:
    author: "Jos\xE9 Miguel Lago, Diego Hurtado de Mendoza"
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: AX.25 AFSK1200
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: totem_afsk_ax25_txrx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: AFSK1200 TX/RX
    window_size: 2000,4096
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 32]
    rotation: 0
    state: enabled

blocks:
- name: EbN0_dB
  id: variable
  parameters:
    comment: ''
    value: '16'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 979]
    rotation: 0
    state: disabled
- name: EbN0_dB
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (0,0,1,2)
    label: Eb/N0 (dB)
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '50'
    value: '20'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [305, 947]
    rotation: 0
    state: disabled
- name: SNR_dB
  id: variable
  parameters:
    comment: ''
    value: EbN0_dB-10*math.log10(channel_rate/baudrate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 979]
    rotation: 0
    state: disabled
- name: baudrate
  id: variable
  parameters:
    comment: ''
    value: '1200'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 36.0]
    rotation: 0
    state: enabled
- name: channel_rate
  id: variable
  parameters:
    comment: ''
    value: 4*samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 33]
    rotation: 0
    state: enabled
- name: freq
  id: variable
  parameters:
    comment: ''
    value: 401e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 36.0]
    rotation: 0
    state: enabled
- name: hostname
  id: variable
  parameters:
    comment: ''
    value: '"10.42.0.100"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [239, 109]
    rotation: 0
    state: enabled
- name: postamble_len
  id: variable
  parameters:
    comment: ''
    value: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [697, 38]
    rotation: 0
    state: enabled
- name: preamble_len
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [595, 39]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: sps*baudrate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [395, 35]
    rotation: 0
    state: enabled
- name: sigma
  id: variable
  parameters:
    comment: Psignal = 1
    value: 10**(-SNR_dB/20)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 979]
    rotation: 0
    state: disabled
- name: soapy_dev
  id: variable
  parameters:
    comment: ''
    value: '"driver=totem" + (f",hostname={hostname}" if hostname else "")'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [353, 109]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 35]
    rotation: 0
    state: enabled
- name: tag_postamble
  id: variable_tag_object
  parameters:
    comment: ''
    key: pmt.intern("packet_len")
    offset: '0'
    src: pmt.from_bool(False)
    value: pmt.from_long(postamble_len*8)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1287, 40]
    rotation: 0
    state: true
- name: tag_preamble
  id: variable_tag_object
  parameters:
    comment: ''
    key: pmt.intern("packet_len")
    offset: '0'
    src: pmt.from_bool(False)
    value: pmt.from_long(preamble_len*8)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1187, 40]
    rotation: 0
    state: true
- name: variable_low_pass_filter_taps_0
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: ''
    cutoff_freq: '500'
    gain: '1.0'
    samp_rate: samp_rate
    width: 1.5e3
    win: firdes.WIN_KAISER
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [748, 1274]
    rotation: 0
    state: enabled
- name: analog_frequency_modulator_fc_0
  id: analog_frequency_modulator_fc
  parameters:
    affinity: ''
    alias: ''
    comment: 2*math.pi/(baudrate * sps)
    maxoutbuf: '0'
    minoutbuf: '0'
    sensitivity: 2*math.pi/(baudrate * sps)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 415]
    rotation: 0
    state: enabled
- name: analog_nbfm_rx_0
  id: analog_nbfm_rx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: int(samp_rate)
    comment: ''
    max_dev: 3e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: channel_rate
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [491, 1412]
    rotation: 0
    state: enabled
- name: analog_nbfm_tx_0
  id: analog_nbfm_tx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: sps*baudrate
    comment: ''
    fh: '-1.0'
    max_dev: 3e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: channel_rate
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1353, 553]
    rotation: 180
    state: true
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: 2*sps / (2*math.pi)
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1002, 1457]
    rotation: 0
    state: enabled
- name: analog_rail_ff_0
  id: analog_rail_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    hi: '1'
    lo: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1442, 1444]
    rotation: 0
    state: true
- name: ax25_aprs
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport array\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \n \
      \   \"\"\"APRS AX.25 header\n\nSource and Destination must be length 6 (add\
      \ padding spaces to fill)\nPath can be up to 8 digipeaters (6 bytes each one)\n\
      \nThe input expects a uint8 vector of ascii chars as payload to the APRS packet.\n\
      \    \"\"\"\n\n\n    def __init__(self, source=\"AAAAAA\", destination=\"BBBBBB\"\
      , path=\"\", verbose=False):  # only default arguments here\n        \"\"\"\
      arguments to this function show up as parameters in GRC\"\"\"\n\n        gr.sync_block.__init__(\n\
      \            self,\n            name='APRS AX.25 header',   # will show up in\
      \ GRC\n            in_sig=[],\n            out_sig=[]\n        )\n        #\
      \ if an attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n\n        self.verbose = verbose\n\
      \        self.source = source\n        self.destination = destination\n    \
      \    self.path = path\n\n        # Register PMT ports\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n\n    \
      \    # Register callback for input messages\n        self.set_msg_handler(pmt.intern(\"\
      in\"), self.handle_msg)\n\n\n    def handle_msg(self, pmt_msg):\n\n        #\
      \ Take pmt contents\n        msg = pmt.cdr(pmt_msg)\n\n        if not pmt.is_u8vector(msg):\n\
      \            print (\"[ERROR] Received invalid message type. Expected u8vector\"\
      )\n            return\n\n        # Check arguments\n        if len(self.source)\
      \ != 6 or len(self.destination) != 6:\n            print (\"[ERROR] Check length\
      \ of source/destination (length = 6)\")\n            return\n\n        if (len(self.path)\
      \ > 48):\n            print (\"[ERROR] Check length of path (max. length 48\
      \ chars)\")\n            return\n\n        if self.path != \"\":\n         \
      \   path = np.fromstring(self.path, dtype='uint8')\n\n\n        # Conversion\
      \ to numpy bytes array\n        payload = np.array(pmt.u8vector_elements(msg),\
      \ dtype = 'uint8')\n\n        # Add ProtocolID (0xF0)\n        pid = np.array(0xF0,dtype='uint8')\n\
      \        payload = np.insert(payload,0,pid)\n\n        # Add Control Field (0x03)\n\
      \        cf = np.array(0x03,dtype='uint8')\n        payload = np.insert(payload,0,cf)\n\
      \n        # Add Digipeater addresses\n        if self.path:\n            # Encode\
      \ SSID (1 lsb due to last address field)\n            path = path << 1 | 0x80\n\
      \            payload = np.insert(payload,0,path)\n\n        # Add Source Address\n\
      \        # Encode SSID (0 lsb since is not the last address field)\n       \
      \ source = np.fromstring(self.source, dtype='uint8') << 1 | 0x60\n        payload\
      \ = np.insert(payload,0,source)\n\n        # Add Destination Address\n     \
      \   # Encode SSID (0 lsb since is not the last address field)\n        destination\
      \ = np.fromstring(self.destination, dtype='uint8') << 1 | 0x60\n        payload\
      \ = np.insert(payload,0,destination)\n\n\n        # Back to bytes array\n  \
      \      aprs_packet_bytes = array.array('B', payload)\n\n        # Publish aprs\
      \ packet as pmt\n        self.message_port_pub(\n            pmt.intern('out'),\n\
      \            pmt.cons(\n                pmt.car(pmt_msg),\n                pmt.init_u8vector(\n\
      \                    len(aprs_packet_bytes),\n                    aprs_packet_bytes\n\
      \                )\n            )\n        )\n\n        if self.verbose:\n \
      \           print (\"Source: \"+self.source+\"  Destination: \"+self.destination+\"\
      \  Path: \"+self.path)\n            print (\"APRS Packet: \")\n            print\
      \ (aprs_packet_bytes)\n            print (\"\\n\")\n\n\n    def work(self, input_items,\
      \ output_items):\n        # No samples to process\n        pass\n"
    affinity: ''
    alias: ''
    comment: 'Source

      Destination

      Path'
    destination: '"EA1RCT"'
    maxoutbuf: '0'
    minoutbuf: '0'
    path: '"EA1RCT"'
    source: '"EA1RCT"'
    verbose: '0'
  states:
    _io_cache: ('APRS AX.25 header', 'blk', [('source', "'AAAAAA'"), ('destination',
      "'BBBBBB'"), ('path', "''"), ('verbose', 'False')], [('in', 'message', 1)],
      [('out', 'message', 1)], 'APRS AX.25 header\n\nSource and Destination must be
      length 6 (add padding spaces to fill)\nPath can be up to 8 digipeaters (6 bytes
      each one)\n\nThe input expects a uint8 vector of ascii chars as payload to the
      APRS packet.\n    ', ['destination', 'path', 'source', 'verbose'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [729, 215]
    rotation: 0
    state: enabled
- name: blocks_complex_to_real_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1457, 419]
    rotation: 0
    state: enabled
- name: blocks_message_debug_1
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [377, 1582]
    rotation: 180
    state: enabled
- name: blocks_message_strobe_1_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("Hello World")
    period: '3000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 230]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: sps
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1062, 415]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_multiply_length_0
  id: blocks_tagged_stream_multiply_length
  parameters:
    affinity: ''
    alias: ''
    c: channel_rate/baudrate
    comment: ''
    lengthtagname: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [790, 600]
    rotation: 180
    state: enabled
- name: blocks_tagged_stream_mux_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '3'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [428, 387]
    rotation: 0
    state: true
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[ tag_preamble ]'
    type: byte
    vector: preamble_len*[1,0,1,0,1,0,1,0]
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [428, 310]
    rotation: 180
    state: true
- name: blocks_vector_source_x_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[tag_postamble]'
    type: byte
    vector: postamble_len*[1,0,1,0,1,0,1,0]
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [427, 488]
    rotation: 180
    state: true
- name: channels_channel_model_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'True'
    comment: ''
    epsilon: '1.0'
    freq_offset: '0.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: sigma
    seed: '0'
    taps: 1.0 + 1.0j
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [588, 849]
    rotation: 0
    state: disabled
- name: digital_binary_slicer_fb_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1003, 1646]
    rotation: 180
    state: enabled
- name: digital_chunks_to_symbols_xx_0
  id: digital_chunks_to_symbols_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    dimension: '1'
    in_type: byte
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    out_type: float
    symbol_table: (1200, 2200)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [766, 419]
    rotation: 0
    state: true
- name: digital_hdlc_deframer_bp_0
  id: digital_hdlc_deframer_bp
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '500'
    maxoutbuf: '0'
    min: '10'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [634, 1634]
    rotation: 180
    state: enabled
- name: digital_hdlc_framer_pb_0
  id: digital_hdlc_framer_pb
  parameters:
    affinity: ''
    alias: ''
    comment: Flag + Payload + FCS + Flag
    frame_tag_name: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [953, 240]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: 6*0.045
    max_dev: '0.01'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '128'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_MMSE_8TAP
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1244, 1634]
    rotation: 180
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='NRZI Encoder',   # will show up in GRC\n            in_sig=[np.uint8],\n\
      \            out_sig=[np.uint8]\n        )\n        # if an attribute with the\
      \ same name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.last = 0\n\n    def work(self, input_items, output_items):\n\
      \        in0 = input_items[0]\n        out = output_items[0]\n        \n   \
      \     for i, x in enumerate(in0):\n            out[i] = self.last = ~(x ^ self.last)\
      \ & 1\n\n        return len(out)\n"
    affinity: ''
    alias: ''
    comment: Python custom block
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('NRZI Encoder', 'blk', [], [('0', 'byte', 1)], [('0', 'byte', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [249, 417]
    rotation: 0
    state: enabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='NRZI Decoder',   # will show up in GRC\n            in_sig=[np.uint8],\n\
      \            out_sig=[np.uint8]\n        )\n        # if an attribute with the\
      \ same name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.last = 0\n\n    def work(self, input_items, output_items):\n\
      \        in0 = input_items[0]\n        out = output_items[0]\n        \n   \
      \     for i, x in enumerate(in0):\n            out[i] = ~(x ^ self.last) & 1\n\
      \            self.last = x\n\n        return len(out)\n"
    affinity: ''
    alias: ''
    comment: Python custom block
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('NRZI Decoder', 'blk', [], [('0', 'byte', 1)], [('0', 'byte', 1)],
      'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [820, 1646]
    rotation: 180
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 140]
    rotation: 0
    state: enabled
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 15e3
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: channel_rate
    type: fir_filter_ccf
    width: 30e3
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1141, 546]
    rotation: 180
    state: true
- name: low_pass_filter_0_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: '15000'
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: channel_rate
    type: fir_filter_ccf
    width: '30000'
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 1388]
    rotation: 0
    state: true
- name: low_pass_filter_1
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: baudrate
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: interp_fir_filter_fff
    width: baudrate/2
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1223, 1404]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: channel_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: (1,1,1,1)
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"TX"'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [347, 674]
    rotation: 0
    state: disabled
- name: qtgui_freq_sink_x_0_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: channel_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: (2,1,1,1)
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"RX"'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [254, 1273]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0_1
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '512'
    freqhalf: 'False'
    grid: 'True'
    gui_hint: (1,1,1,1)
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"Before FM mod"'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.05'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_RECTANGULAR
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1356, 705]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (1,2,1,1)
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Post-Demodulation"'
    nconnections: '1'
    size: 2048*sps
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1378, 1310]
    rotation: 180
    state: enabled
- name: qtgui_time_sink_x_0_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (2,1,1,1)
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"RX Time Baseband"'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [507, 1282]
    rotation: 180
    state: disabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (2,2,1,1)
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Post sync"'
    nconnections: '1'
    size: '2048'
    srate: samp_rate
    stemplot: 'False'
    style1: '0'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 1796]
    rotation: 0
    state: enabled
- name: soapy_sink_0
  id: soapy_sink
  parameters:
    affinity: ''
    alias: ''
    amp_gain0: '0'
    ant0: A
    ant1: TX
    args: bufflen=100000
    balance0: '0'
    balance1: '0'
    bw0: 200e3
    bw1: '0'
    center_freq0: freq
    center_freq1: 100.0e6
    clock_rate: '0'
    clock_source: ''
    comment: ''
    correction0: '0'
    correction1: '0'
    dc_offset0: '0'
    dc_offset1: '0'
    dc_offset_auto_mode0: 'False'
    dc_offset_auto_mode1: 'False'
    dev: soapy_dev
    devname: custom
    gain_auto_mode0: 'False'
    gain_auto_mode1: 'False'
    iamp_gain0: '0'
    iamp_gain1: '0'
    length_tag_name: packet_len
    manual_gain0: 'False'
    manual_gain1: 'True'
    nchan: '1'
    nco_freq0: '0'
    nco_freq1: '0'
    overall_gain0: '89'
    overall_gain1: '0'
    pad_gain0: '0'
    pad_gain1: '0'
    pga_gain0: '24'
    pga_gain1: '0'
    samp_rate: channel_rate
    txvga1_gain: '-35'
    txvga2_gain: '0'
    type: fc32
    vga_gain0: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [398, 786]
    rotation: 0
    state: enabled
- name: soapy_source_0
  id: soapy_source
  parameters:
    affinity: ''
    agc0: 'False'
    agc1: 'False'
    alias: ''
    amp_gain0: '0'
    ant0: A_BALANCED
    ant1: RX2
    args: ''
    balance0: '0'
    balance1: '0'
    bw0: 200e3
    bw1: '0'
    center_freq0: freq
    center_freq1: '0'
    clock_rate: '0'
    clock_source: ''
    comment: ''
    correction0: '0'
    correction1: '0'
    dc_offset0: '0'
    dc_offset1: '0'
    dc_removal0: 'True'
    dc_removal1: 'True'
    dev: soapy_dev
    devname: custom
    gain_mode0: Overall
    gain_mode1: Overall
    ifgr_gain: '59'
    lna_gain0: '10'
    lna_gain1: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    mix_gain0: '10'
    nchan: '1'
    nco_freq0: '0'
    nco_freq1: '0'
    overall_gain0: '50'
    overall_gain1: '10'
    pga_gain0: '24'
    pga_gain1: '24'
    rfgr_gain: '9'
    rxvga1_gain: '5'
    rxvga2_gain: '0'
    samp_rate: channel_rate
    sdrplay_agc_setpoint: '-30'
    sdrplay_biastee: 'False'
    sdrplay_dabnotch: 'False'
    sdrplay_if_mode: Zero-IF
    sdrplay_rfnotch: 'False'
    settings0: ''
    settings1: ''
    stream_args: bufflen=10000
    tia_gain0: '0'
    tia_gain1: '0'
    tune_args0: ''
    tune_args1: ''
    tuner_gain0: '10'
    type: fc32
    vga_gain0: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [836, 785]
    rotation: 0
    state: enabled
- name: string_to_uint8_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport pmt\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n\n        gr.sync_block.__init__(\n       \
      \     self,\n            name='String to uint8 vector',   # will show up in\
      \ GRC\n            in_sig=None,\n            out_sig=None\n        )\n\n   \
      \     # if an attribute with the same name as a parameter is found,\n      \
      \  # a callback is registered (properties work, too).\n        self.message_port_register_out(pmt.intern('message_out'))\n\
      \        self.message_port_register_in(pmt.intern('message_in'))\n        self.set_msg_handler(pmt.intern('message_in'),\
      \ self.handle_msg)\n\n\n    def handle_msg(self, msg):\n        \n        nvec\
      \ = pmt.to_python(msg)\n\n        self.message_port_pub(\n            pmt.intern('message_out'),\
      \ \n            pmt.cons(\n                pmt.make_dict(), \n             \
      \   pmt.to_pmt(np.array(bytearray(nvec, \"utf8\")))\n            )\n       \
      \ )\n\n    def work(self, input_items, output_items):\n        pass\n"
    affinity: ''
    alias: ''
    comment: ASCII to Binary
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('String to uint8 vector', 'blk', [], [('message_in', 'message', 1)],
      [('message_out', 'message', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [434, 241]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: hdlc_frames
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1199, 238]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0_0_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: rx_signal
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 882]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0_0_1_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: tx_signal
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [575, 610]
    rotation: 180
    state: enabled
- name: virtual_source_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: rx_signal
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [52, 1436]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: tx_signal
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 903]
    rotation: 0
    state: enabled
- name: virtual_source_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: hdlc_frames
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [31, 415]
    rotation: 0
    state: enabled
- name: xlating_fire
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: '1700'
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: variable_low_pass_filter_taps_0
    type: fcf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [743, 1428]
    rotation: 0
    state: enabled

connections:
- [analog_frequency_modulator_fc_0, '0', blocks_complex_to_real_0, '0']
- [analog_nbfm_rx_0, '0', qtgui_time_sink_x_0_1_0, '0']
- [analog_nbfm_rx_0, '0', xlating_fire, '0']
- [analog_nbfm_tx_0, '0', low_pass_filter_0, '0']
- [analog_nbfm_tx_0, '0', qtgui_freq_sink_x_0_1, '0']
- [analog_quadrature_demod_cf_0, '0', low_pass_filter_1, '0']
- [analog_rail_ff_0, '0', digital_symbol_sync_xx_0, '0']
- [analog_rail_ff_0, '0', qtgui_time_sink_x_0_1, '0']
- [ax25_aprs, out, digital_hdlc_framer_pb_0, in]
- [blocks_complex_to_real_0, '0', analog_nbfm_tx_0, '0']
- [blocks_message_strobe_1_0, strobe, string_to_uint8_0, message_in]
- [blocks_repeat_0, '0', analog_frequency_modulator_fc_0, '0']
- [blocks_tagged_stream_multiply_length_0, '0', virtual_sink_0_0_0_1_0, '0']
- [blocks_tagged_stream_mux_0, '0', digital_chunks_to_symbols_xx_0, '0']
- [blocks_vector_source_x_0, '0', blocks_tagged_stream_mux_0, '0']
- [blocks_vector_source_x_0_0, '0', blocks_tagged_stream_mux_0, '2']
- [channels_channel_model_0, '0', virtual_sink_0_0_0_1, '0']
- [digital_binary_slicer_fb_0, '0', epy_block_1_0, '0']
- [digital_chunks_to_symbols_xx_0, '0', blocks_repeat_0, '0']
- [digital_hdlc_deframer_bp_0, out, blocks_message_debug_1, print_pdu]
- [digital_hdlc_framer_pb_0, '0', virtual_sink_0, '0']
- [digital_symbol_sync_xx_0, '0', digital_binary_slicer_fb_0, '0']
- [digital_symbol_sync_xx_0, '0', qtgui_time_sink_x_1, '0']
- [epy_block_1, '0', blocks_tagged_stream_mux_0, '1']
- [epy_block_1_0, '0', digital_hdlc_deframer_bp_0, '0']
- [low_pass_filter_0, '0', blocks_tagged_stream_multiply_length_0, '0']
- [low_pass_filter_0_0, '0', analog_nbfm_rx_0, '0']
- [low_pass_filter_1, '0', analog_rail_ff_0, '0']
- [soapy_source_0, '0', virtual_sink_0_0_0_1, '0']
- [string_to_uint8_0, message_out, ax25_aprs, in]
- [virtual_source_0_0_0, '0', low_pass_filter_0_0, '0']
- [virtual_source_0_0_0, '0', qtgui_freq_sink_x_0_0, '0']
- [virtual_source_0_0_0_0, '0', channels_channel_model_0, '0']
- [virtual_source_0_0_0_0, '0', qtgui_freq_sink_x_0, '0']
- [virtual_source_0_0_0_0, '0', soapy_sink_0, '0']
- [virtual_source_0_1, '0', epy_block_1, '0']
- [xlating_fire, '0', analog_quadrature_demod_cf_0, '0']

metadata:
  file_format: 1
